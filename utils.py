import os
from telegram import InlineKeyboardMarkup, Update
from config import logger, NOTIFICATIONS_ENABLED, FILE_DIR
from database import get_users, update_page_date, update_last_checked, get_pages

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_user_access(update: Update, user_exists_func, add_user_func, get_users_func) -> bool:
    user_id = update.effective_user.id
    user_data = user_exists_func(user_id)
    
    if user_data:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø")
        return True
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
    username = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    first_name = update.effective_user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    last_name = update.effective_user.last_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞ –ª–∏ –±–∞–∑–∞ (–¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    if len(get_users_func()) == 0:
        add_user_func(user_id, is_admin=1)
        logger.info(
            f"–ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ID={user_id}, "
            f"Username={username}, Name={first_name} {last_name}"
        )
        return True
    
    logger.warning(
        f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={user_id}, "
        f"Username={username}, Name={first_name} {last_name}"
    )
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
    update.message.reply_text(
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É. '
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø.'
    )
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def check_admin_access(update: Update, user_exists_func) -> bool:
    user_id = update.effective_user.id
    user_data = user_exists_func(user_id)
    
    if user_data and user_data[1] == 1:  # is_admin = 1
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return True
    
    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    update.message.reply_text(
        '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.'
    )
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
def send_notification_to_subscribers(bot, message, keyboard=None):
    if not NOTIFICATIONS_ENABLED:
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
        return

    reply_markup = None
    if keyboard:
        reply_markup = InlineKeyboardMarkup(keyboard)

    users = get_users()
    subscribers = [user[0] for user in users if user[2] == 1]  # id –≥–¥–µ sub = 1
    
    success_count = 0
    for user_id in subscribers:
        try:
            bot.send_message(
                chat_id=user_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            success_count += 1
            logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {success_count} –∏–∑ {len(subscribers)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
def check_pages(rutracker_api, BOT):
    logger.info("–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    pages = get_pages()
    updates_found = False
    
    for page in pages:
        page_id, title, url, old_date, _ = page
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title} (ID: {page_id})")
        page_content = rutracker_api.get_page_content(url)
        new_date = rutracker_api.parse_date(page_content)
        
        if new_date and new_date != old_date:
            updates_found = True
            torrent_file_path = os.path.join(FILE_DIR, f'{page_id}.torrent')
            rutracker_api.download_torrent_by_url(url, torrent_file_path)
            update_page_date(page_id, new_date)
            logger.info(f"–î–∞—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {title} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ —Ç–æ—Ä—Ä–µ–Ω—Ç-—Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω –≤ {torrent_file_path}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            from telegram import InlineKeyboardButton
            notification_message = (
                f"<b>üÜï –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</b>\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}\n"
                f"<b>–ù–æ–≤–∞—è –¥–∞—Ç–∞:</b> {new_date}\n"
                f"<b>–ü—Ä–µ–¥—ã–¥—É—â–∞—è –¥–∞—Ç–∞:</b> {old_date or '–ù–µ –∑–∞–¥–∞–Ω–∞'}\n"
                f"<b>ID:</b> {page_id}"
            )
            
            keyboard = [
                [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–∞—á—É", url=url)],
                [InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="back_to_list")]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            send_notification_to_subscribers(BOT, notification_message, keyboard)
            
        update_last_checked(page_id)
    
    if not updates_found:
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    return updates_found

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–æ—Å—Ç—É–ø–∞
def restricted(user_exists_func, add_user_func, get_users_func):
    def decorator(func):
        def wrapped(update, context, *args, **kwargs):
            if not check_user_access(update, user_exists_func, add_user_func, get_users_func):
                return
            return func(update, context, *args, **kwargs)
        return wrapped
    return decorator

def admin_required(user_exists_func, add_user_func, get_users_func):
    def decorator(func):
        def wrapped(update, context, *args, **kwargs):
            if not check_user_access(update, user_exists_func, add_user_func, get_users_func):
                return
            if not check_admin_access(update, user_exists_func):
                return
            return func(update, context, *args, **kwargs)
        return wrapped
    return decorator

